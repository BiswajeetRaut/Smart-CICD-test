name: Smart CI/CD (MVP1)

on:
  push:
    branches:
      - main
      - '**'
  pull_request:

jobs:
  detect-components:
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.detect.outputs.components }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install yq
        uses: mikefarah/yq@v4.44.1

      - name: Get changed files
        id: changes
        run: |
          echo "Detecting changed files..."
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin ${{ github.base_ref }} --depth=1
            git diff --name-only origin/${{ github.base_ref }}...HEAD > changes.txt
          else
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              git diff --name-only HEAD~1 HEAD > changes.txt
            else
              git ls-files > changes.txt
            fi
          fi
          echo "Changed files detected:"
          cat changes.txt

      - name: Detect impacted components
        id: detect
        run: |
          echo "### Detecting impacted components ###"
          CHANGED=$(cat changes.txt)
          COMPONENTS_FILE=components.tmp
          > $COMPONENTS_FILE
          DEPS=$(cat dependencies.json)

          echo "" > impact.log

          for FILE in $CHANGED; do
            IMPACTED=()

            # Walk up directories until we find ci-config.yml
            DIR=$(dirname "$FILE")
            while [ "$DIR" != "/" ] && [ "$DIR" != "." ]; do
              if [ -f "$DIR/ci-config.yml" ]; then
                IMPACTED+=("$DIR")
              fi
              DIR=$(dirname "$DIR")
            done

            # Dependency expansion with trace logging
            EXPANDED=()
            for COMP in "${IMPACTED[@]}"; do
              EXPANDED+=("$COMP")
              for OTHER in $(echo "$DEPS" | yq -r 'keys[]'); do
                if echo "$DEPS" | yq -e ".\"$OTHER\"[] | select(. == \"$COMP\")" > /dev/null; then
                  echo "Dependency chain: $OTHER depends on $COMP" >> impact.log
                  EXPANDED+=("$OTHER")
                fi
              done
            done

            printf "%s\n" "${EXPANDED[@]}" | grep -v '^$' | sort -u >> $COMPONENTS_FILE
            echo "$FILE ‚Üí [$(printf "%s " "${EXPANDED[@]}" | xargs)]" >> impact.log
          done

          VALID_KEYS=$(echo "$DEPS" | yq -r 'keys[]')
          FILTERED=$(sort -u $COMPONENTS_FILE | grep -v '^$' | grep -Fxf <(echo "$VALID_KEYS"))
          UNIQUE=$(echo "$FILTERED" | yq -R . | yq -s -c .)

          if [ -z "$UNIQUE" ] || [ "$UNIQUE" = "[]" ] || [ "$UNIQUE" = "null" ]; then
            UNIQUE='["noop"]'
          fi

          echo "### Final impacted components: $UNIQUE ###"
          echo "components=$UNIQUE" >> $GITHUB_OUTPUT
          echo "### Changed file ‚Üí Impacted components table ###"
          cat impact.log || true

      - name: Upload impact report
        uses: actions/upload-artifact@v4
        with:
          name: impact-report
          path: impact.log

  build:
    needs: detect-components
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.detect-components.outputs.components || '["noop"]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install yq
        if: matrix.component != 'noop'
        uses: mikefarah/yq@v4.44.1

      - name: Skip if noop
        if: matrix.component == 'noop'
        run: echo "‚úÖ No impacted components, skipping build."

      - name: Build & Run Tests
        if: matrix.component != 'noop'
        run: |
          echo "üèóÔ∏è Building component: ${{ matrix.component }}"
          cd "${{ matrix.component }}"
          CONFIG="ci-config.yml"
          if [ -f "$CONFIG" ]; then
            BUILD_CMD=$(yq -r '.build' $CONFIG)
            echo "üî® Build command: $BUILD_CMD"
            eval "$BUILD_CMD"

            TESTS=$(yq -r '.tests | keys[]' $CONFIG || true)
            for TEST in $TESTS; do
              CMD=$(yq -r ".tests[\"$TEST\"]" $CONFIG)
              echo "üß™ Running $TEST tests: $CMD"
              eval "$CMD"
            done
          else
            echo "‚ö†Ô∏è No ci-config.yml found in ${{ matrix.component }}"
          fi

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.detect-components.outputs.components || '["noop"]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install yq
        if: matrix.component != 'noop'
        uses: mikefarah/yq@v4.44.1

      - name: Skip if noop
        if: matrix.component == 'noop'
        run: echo "‚úÖ No impacted components, skipping deploy."

      - name: Deploy component
        if: matrix.component != 'noop'
        run: |
          echo "üöÄ Deploying component: ${{ matrix.component }}"
          cd "${{ matrix.component }}"
          CONFIG="ci-config.yml"
          if [ -f "$CONFIG" ]; then
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              ENV="production"
            else
              ENV="staging"
            fi
            CMD=$(yq -r ".deploy[\"$ENV\"]" $CONFIG)
            if [ "$CMD" != "null" ] && [ -n "$CMD" ]; then
              echo "Running deploy for $ENV: $CMD"
              eval "$CMD"
            else
              echo "‚ö†Ô∏è No deploy command found for $ENV in $CONFIG"
            fi
          else
            echo "‚ö†Ô∏è No ci-config.yml found in ${{ matrix.component }}"
          fi
