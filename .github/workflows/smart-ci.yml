name: Smart CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.detect.outputs.components }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: files
        run: |
          echo "### Getting changed files ###"
          git fetch origin ${{ github.base_ref || 'main' }}
          git diff --name-only origin/${{ github.base_ref || 'main' }} > changes.txt
          cat changes.txt

      - name: Detect impacted components
        id: detect
        run: |
          echo "### Detecting impacted components ###"
          CHANGED=$(cat changes.txt)
          COMPONENTS=""
          DEPS=$(cat dependencies.json)

          for FILE in $CHANGED; do
            ROOT=$(echo $FILE | cut -d'/' -f1)
            echo "File changed: $FILE â†’ root: $ROOT"
            COMPONENTS="$COMPONENTS $ROOT"

            # Check dependencies
            for COMP in $(echo $DEPS | jq -r 'keys[]'); do
              if echo $DEPS | jq -e ".\"$COMP\" | index(\"$ROOT\")" > /dev/null; then
                echo "Dependency match: $ROOT impacts $COMP"
                COMPONENTS="$COMPONENTS $COMP"
              fi
            done
          done

          UNIQUE=$(echo $COMPONENTS | tr ' ' '\n' | grep -v '^$' | sort -u | jq -R . | jq -s .)
          if [ -z "$UNIQUE" ] || [ "$UNIQUE" = "null" ]; then
            UNIQUE="[]"
          fi

          echo "### Final impacted components: $UNIQUE ###"
          echo "components=$UNIQUE" >> $GITHUB_OUTPUT

  build:
    needs: detect
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ${{ fromJson(needs.detect.outputs.components) }}
      max-parallel: 2
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load build config
        id: config
        run: |
          CONFIG_FILE="${{ matrix.component }}/build-config.json"
          if [ -f "$CONFIG_FILE" ]; then
            echo "### Using config from $CONFIG_FILE ###"
            CMD=$(jq -r '.build' $CONFIG_FILE)
          else
            echo "### No build-config.json found, using default ###"
            CMD="echo 'No build needed for ${{ matrix.component }}'"
          fi
          echo "cmd=$CMD" >> $GITHUB_OUTPUT

      - name: Build component
        run: |
          echo "### Building component: ${{ matrix.component }} ###"
          echo "Running command: ${{ steps.config.outputs.cmd }}"
          cd ${{ matrix.component }} || exit 0
          sh -c "${{ steps.config.outputs.cmd }}"
