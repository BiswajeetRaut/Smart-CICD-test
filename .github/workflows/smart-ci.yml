name: Smart CI/CD (Enhanced)

on:
  push:
    branches:
      - main
      - '**'
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  detect-components:
    runs-on: ubuntu-latest
    outputs:
      components-json: ${{ steps.detect.outputs.components-json }}
      has-changes: ${{ steps.detect.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # full history for diffs

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y yq jq

      - name: Get changed files
        id: changes
        run: |
          echo "Detecting changed files..."
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            echo "PR detected: comparing $HEAD_SHA against $BASE_SHA"
            git diff --name-only "$BASE_SHA" "$HEAD_SHA" > changes.txt
          elif [ "${{ github.event_name }}" = "push" ]; then
            if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
              echo "New branch detected, comparing against main"
              git diff --name-only origin/main...HEAD > changes.txt 2>/dev/null || git ls-files > changes.txt
            else
              echo "Regular push: comparing ${{ github.event.before }}..${{ github.event.after }}"
              git diff --name-only "${{ github.event.before }}" "${{ github.event.after }}" > changes.txt
            fi
          else
            echo "Fallback: HEAD~1"
            git diff --name-only HEAD~1 HEAD > changes.txt 2>/dev/null || git ls-files > changes.txt
          fi

          echo "Changed files:"
          cat changes.txt

          if [ -s changes.txt ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Detect impacted components
        id: detect
        run: |
          echo "### Detecting impacted components ###"
          if [ ! -f "dependencies.json" ]; then
            echo "{}" > dependencies.json
          fi

          CHANGED_FILES=$(cat changes.txt)
          COMPONENTS_SET=$(mktemp)
          DEPS=$(cat dependencies.json)
          echo "Changed files analysis:" > impact.log

          if [ ! -s changes.txt ]; then
            echo "components-json=[]" >> $GITHUB_OUTPUT
            echo "No changes detected" >> impact.log
            exit 0
          fi

          while IFS= read -r FILE; do
            [ -z "$FILE" ] && continue
            echo "Analyzing: $FILE" >> impact.log
            DIR=$(dirname "$FILE")
            while [ "$DIR" != "/" ] && [ "$DIR" != "." ]; do
              if [ -f "$DIR/ci-config.yml" ]; then
                echo "  Found component: $DIR" >> impact.log
                echo "$DIR" >> "$COMPONENTS_SET"
                break
              fi
              DIR=$(dirname "$DIR")
            done
          done < changes.txt

          echo "" >> impact.log
          echo "Dependency expansion:" >> impact.log
          for PASS in 1 2 3; do
            while IFS= read -r COMP; do
              [ -z "$COMP" ] && continue
              DEPENDENTS=$(echo "$DEPS" | jq -r --arg comp "$COMP" 'to_entries[] | select(.value | type == "array" and (. | index($comp))) | .key')
              for DEPENDENT in $DEPENDENTS; do
                if ! grep -Fxq "$DEPENDENT" "$COMPONENTS_SET"; then
                  echo "  $COMP ‚Üí $DEPENDENT" >> impact.log
                  echo "$DEPENDENT" >> "$COMPONENTS_SET"
                fi
              done
            done < <(sort -u "$COMPONENTS_SET")
          done

          VALID_COMPONENTS=$(mktemp)
          while IFS= read -r COMP; do
            [ -z "$COMP" ] && continue
            if [ -f "$COMP/ci-config.yml" ]; then
              echo "$COMP" >> "$VALID_COMPONENTS"
            else
              echo "‚ö†Ô∏è Invalid component: $COMP" >> impact.log
            fi
          done < <(sort -u "$COMPONENTS_SET")

          if [ -s "$VALID_COMPONENTS" ]; then
            COMPONENTS_ARRAY=$(sort -u "$VALID_COMPONENTS" | jq -R . | jq -s -c .)
          else
            COMPONENTS_ARRAY='["noop"]'
            echo "No valid components, using noop" >> impact.log
          fi

          echo "components-json=$COMPONENTS_ARRAY" >> $GITHUB_OUTPUT
          echo "" >> impact.log
          echo "Final impacted components: $COMPONENTS_ARRAY" >> impact.log

      - name: Upload impact report
        uses: actions/upload-artifact@v4
        with:
          name: impact-report-${{ github.run_id }}
          path: impact.log

      - name: Debug outputs
        run: |
          echo "=== DETECT DEBUG ==="
          echo "Components JSON: ${{ steps.detect.outputs.components-json }}"
          echo "Has changes: ${{ steps.detect.outputs.has-changes }}"
          echo "==================="

  build:
    needs: detect-components
    if: needs.detect-components.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.detect-components.outputs.components-json) }}
    steps:
      - name: Debug matrix
        run: |
          echo "=== MATRIX DEBUG ==="
          echo "Matrix component: ${{ matrix.component }}"
          echo "All components (JSON): ${{ needs.detect-components.outputs.components-json }}"
          echo "Has changes: ${{ needs.detect-components.outputs.has-changes }}"
          echo "===================="

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install tools
        if: matrix.component != 'noop'
        run: sudo apt-get update && sudo apt-get install -y yq jq

      - name: Skip if noop
        if: matrix.component == 'noop'
        run: echo "‚úÖ No impacted components, skipping build."

      - name: Build & Run Tests
        if: matrix.component != 'noop'
        run: |
          echo "============================"
          echo "üèóÔ∏è Building component: ${{ matrix.component }}"
          echo "============================"
          cd "${{ matrix.component }}"
          CONFIG="ci-config.yml"
          if [ -f "$CONFIG" ]; then
            BUILD_CMD=$(yq -r '.build' $CONFIG)
            echo "üî® Build: $BUILD_CMD"
            eval "$BUILD_CMD"

            TESTS=$(yq -r '.tests | keys[]' $CONFIG || true)
            for TEST in $TESTS; do
              CMD=$(yq -r ".tests[\"$TEST\"]" $CONFIG)
              echo "üß™ Running $TEST tests: $CMD"
              eval "$CMD"
            done
          else
            echo "‚ö†Ô∏è No ci-config.yml in ${{ matrix.component }}"
          fi
