name: Smart CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  detect-components:
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.detect.outputs.components }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changes
        run: |
          git fetch origin ${{ github.base_ref || 'main' }} --depth=1
          git diff --name-only HEAD origin/${{ github.base_ref || 'main' }} > changes.txt
          echo "Changed files:"
          cat changes.txt

      - name: Debug changed files
        run: |
          echo "Changed files detected by git:"
          cat changes.txt
          echo "Files with build-config.json present:"
          find . -name "build-config.json"

      - name: Detect impacted components
        id: detect
        run: |
          echo "### Detecting impacted components ###"
          CHANGED=$(cat changes.txt)
          COMPONENTS=""
          DEPS=$(cat dependencies.json)

          echo "" > impact.log

          for FILE in $CHANGED; do
            IMPACTED=()

            # Walk up directories until we find build-config.json
            DIR=$(dirname "$FILE")
            while [ "$DIR" != "." ] && [ "$DIR" != "/" ]; do
              if [ -f "$DIR/build-config.json" ]; then
                IMPACTED+=("$DIR")
              fi
              DIR=$(dirname "$DIR")
            done

            # Dependency expansion
            NEW_IMPACTED=()
            for COMP in "${IMPACTED[@]}"; do
              NEW_IMPACTED+=("$COMP")
              for OTHER in $(echo $DEPS | jq -r 'keys[]'); do
                if echo $DEPS | jq -e ".\"$OTHER\" | index(\"$COMP\")" > /dev/null; then
                  NEW_IMPACTED+=("$OTHER")
                fi
              done
            done

            # Deduplicate
            UNIQUE_IMPACTED=$(printf "%s\n" "${NEW_IMPACTED[@]}" | sort -u | xargs)
            COMPONENTS="$COMPONENTS $UNIQUE_IMPACTED"

            echo "$FILE ‚Üí [${UNIQUE_IMPACTED}]" >> impact.log
          done

          UNIQUE=$(echo $COMPONENTS | tr ' ' '\n' | grep -v '^$' | sort -u | jq -R . | jq -s .)

          if [ -z "$UNIQUE" ] || [ "$UNIQUE" = "[]" ]; then
            echo "‚ö†Ô∏è No impacted components detected."
            UNIQUE='["noop"]'
          fi

          echo "### Final impacted components: $UNIQUE ###"
          echo "### Changed file ‚Üí Impacted components table ###"
          cat impact.log || true

          echo "components=$UNIQUE" >> $GITHUB_OUTPUT

      - name: Upload impact report
        uses: actions/upload-artifact@v4
        with:
          name: impact-report
          path: impact.log

  build:
    needs: detect-components
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ${{ fromJson(needs.detect-components.outputs.components) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Skip if noop
        if: matrix.component == 'noop'
        run: echo "‚úÖ No impacted components, skipping build."

      - name: Build & Test component
        if: matrix.component != 'noop'
        run: |
          echo "üèóÔ∏è Building component: ${{ matrix.component }}"
          CONFIG="${{ matrix.component }}/build-config.json"
          if [ -f "$CONFIG" ]; then
            BUILD_CMD=$(jq -r '.build' $CONFIG)
            TEST_CMD=$(jq -r '.test' $CONFIG)

            if [ "$BUILD_CMD" != "null" ] && [ -n "$BUILD_CMD" ]; then
              echo "üî® Running build: $BUILD_CMD"
              eval "$BUILD_CMD"
            else
              echo "‚ö†Ô∏è No build command found in $CONFIG"
            fi

            if [ "$TEST_CMD" != "null" ] && [ -n "$TEST_CMD" ]; then
              echo "üß™ Running tests: $TEST_CMD"
              eval "$TEST_CMD"
            else
              echo "‚ö†Ô∏è No test command found in $CONFIG"
            fi
          else
            echo "‚ö†Ô∏è No build-config.json found for ${{ matrix.component }}"
          fi
