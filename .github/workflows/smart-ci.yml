name: Smart CI/CD (Enhanced with API)

on:
  push:
    branches:
      - main
      - '**'
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  detect-components:
    runs-on: ubuntu-latest
    outputs:
      components-json: ${{ steps.detect.outputs.components-json }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Get changed files
        id: changes
        run: |
          echo "Detecting changed files..."
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            git diff --name-only "$BASE_SHA" "$HEAD_SHA" > changes.txt
          else
            git diff --name-only "${{ github.event.before }}" "${{ github.event.after }}" > changes.txt
          fi

          echo "Changed files:"
          cat changes.txt

          if [ -s changes.txt ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Call Dependency Graph API
        id: call-api
        run: |
          echo "üì° Calling Dependency Graph API..."
          
          API_URL="http://0.0.0.0:8000/analyze"
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          BRANCH="${{ github.ref_name }}"
          COMMIT_SHA="${{ github.sha }}"

          RESPONSE=$(curl -s -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            -d "{
              \"owner\": \"$OWNER\",
              \"repo\": \"$REPO\",
              \"branch\": \"$BRANCH\",
              \"commit\": \"$COMMIT_SHA\"
            }")

          echo "API Response: $RESPONSE"

          # Extract updated dependencies.json from API response
          echo "$RESPONSE" | jq '.updated_dependencies' > dependencies.json

      - name: Detect impacted components
        id: detect
        run: |
          echo "### Detecting impacted components ###"
          
          if [ ! -s dependencies.json ]; then
            echo "components-json=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          DEPS=$(cat dependencies.json)
          COMPONENTS_SET=$(mktemp)
          echo "Changed files analysis:" > impact.log

          while IFS= read -r FILE; do
            [ -z "$FILE" ] && continue
            DIR=$(dirname "$FILE")
            while [ "$DIR" != "/" ] && [ "$DIR" != "." ]; do
              if [ -f "$DIR/ci-config.yml" ]; then
                echo "$DIR" >> "$COMPONENTS_SET"
                break
              fi
              DIR=$(dirname "$DIR")
            done
          done < changes.txt

          # Expand dependencies with jq
          VALID_COMPONENTS=$(mktemp)
          for COMP in $(sort -u "$COMPONENTS_SET"); do
            echo "$COMP" >> "$VALID_COMPONENTS"
            DEPENDENTS=$(echo "$DEPS" | jq -r --arg comp "$COMP" 'to_entries[] | select(.value | index($comp)) | .key')
            for DEP in $DEPENDENTS; do
              echo "$DEP" >> "$VALID_COMPONENTS"
            done
          done

          if [ -s "$VALID_COMPONENTS" ]; then
            COMPONENTS_ARRAY=$(sort -u "$VALID_COMPONENTS" | jq -R . | jq -s -c .)
          else
            COMPONENTS_ARRAY='["noop"]'
          fi

          echo "components-json=$COMPONENTS_ARRAY" >> $GITHUB_OUTPUT
          echo "Final impacted components: $COMPONENTS_ARRAY"

      - name: Upload impact report
        uses: actions/upload-artifact@v4
        with:
          name: impact-report-${{ github.run_id }}
          path: impact.log

  build:
    needs: detect-components
    if: contains(needs.detect-components.outputs.components-json, 'noop') == false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.detect-components.outputs.components-json) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install tools
        if: matrix.component != 'noop'
        run: sudo apt-get update && sudo apt-get install -y yq jq

      - name: Build & Run Tests
        if: matrix.component != 'noop'
        run: |
          cd "${{ matrix.component }}"
          CONFIG="ci-config.yml"
          if [ -f "$CONFIG" ]; then
            BUILD_CMD=$(yq -r '.build' $CONFIG)
            eval "$BUILD_CMD"

            TESTS=$(yq -r '.tests | keys[]' $CONFIG || true)
            for TEST in $TESTS; do
              CMD=$(yq -r ".tests[\"$TEST\"]" $CONFIG)
              eval "$CMD"
            done
          else
            echo "‚ö†Ô∏è No ci-config.yml found in ${{ matrix.component }}"
          fi
